{"body":"# Finatra\r\n\r\n### Description\r\nFinatra is a sinatra clone backed by scala/finagle written by [@capotej](http://twitter.com/capotej) and [@twoism](http://twitter.com/twoism)\r\n\r\n\r\n### Features\r\n* The routing DSL you've come to know and love\r\n\r\n* Asynchronous, uses Finagle-HTTP/Netty\r\n\r\n* Multipart file upload/form handling\r\n\r\n* Modular app support\r\n\r\n* A testing helper\r\n\r\n* Built in static file server (note: not designed for huge files(>100mb))\r\n\r\n* Mustache template support through [mustache.java](https://github.com/spullara/mustache.java)\r\n\r\n### TODO\r\n* Make file serving more efficient / Use an LRU map\r\n\r\n* Plugin api\r\n\r\n\r\n### Installation via RubyGems\r\n    \r\n    $ gem install finatra\r\n    \r\n    $ finatra new MyApp\r\n    Org Name (com.<username>) com.twitter\r\n    [finatra] :: Creating MyApp in /Users/cburnett/dev...\r\n      create  myapp\r\n      create  myapp/Procfile\r\n      create  myapp/README.markdown\r\n      create  myapp/pom.xml\r\n      create  myapp/src/main/scala/com/twitter/myapp/MyApp.scala\r\n      create  myapp/src/test/scala/com/twitter/myapp/MyAppSpec.scala\r\n      create  myapp/src/main/resources/timeline.mustache\r\n      \r\n### Start the Server\r\n\r\n    $ finatra start\r\n    [INFO] Scanning for projects...\r\n    [INFO]                                                                         \r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] Building MyApp 0.0.1-SNAPSHOT\r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] No known dependencies. Compiling everything\r\n    [INFO] launcher 'main' selected => com.twitter.myapp.App\r\n    started on 7070: view logs/finatra.log for more info\r\n\r\n## Other Commands\r\n\r\n    $ finatra\r\n    Tasks:\r\n      finatra compile          # Compile your app with Maven\r\n      finatra console          # Starts a scala console\r\n      finatra help [TASK]      # Describe available tasks or one specific task\r\n      finatra new <MyAppName>  # Create a new Finatra app\r\n      finatra package          # Package a jar for your app\r\n      finatra start            # Run your app on port 7070\r\n      finatra test             # Run the tests\r\n\r\n### Installation via Maven\r\nAdd the repo and dependency to your pom.xml (sbt users to the left)\r\n\r\n```xml\r\n<repositories>\r\n  <repository>\r\n    <id>repo.juliocapote.com</id>\r\n    <url>http://repo.juliocapote.com</url>\r\n  </repository>\r\n</repositories>\r\n\r\n<dependency>\r\n  <groupId>com.twitter</groupId>\r\n  <artifactId>finatra</artifactId>\r\n  <version>0.1.7</version>\r\n</dependency>\r\n```\r\n\r\n### Configuring\r\n\r\nimport finatra\r\n\r\n```scala\r\nimport com.twitter.finatra.{FinatraServer, Controller, View}\r\n```\r\n\r\nadd your apps\r\n```scala\r\nval exampleApp = new ExampleApp\r\nval myResource = new MyResource\r\n\r\nFinatraServer.register(exampleApp)\r\nFinatraServer.register(myResource)\r\n```\r\n\r\nstart the server\r\n\r\n```scala\r\nFinatraServer.start() //Defaults: 7070, \"docroot\"\r\n```\r\n\r\n\r\n### Example project\r\nCheck out [finatra-helloworld](http://github.com/capotej/finatra-helloworld) for an example finatra project\r\n\r\nHere's an [example blog](https://gist.github.com/2626200)\r\n\r\n\r\n### API\r\n\r\n```scala\r\nclass HelloWorld extends Controller {\r\n\r\n  def tweets = List(new Tweet(\"hey!\"), new Tweet(\"lol\"))\r\n\r\n  get(\"/cookies\") { request =>\r\n    render.json(request.cookies).header(\"Content-Type\", \"text/html\")\r\n  }\r\n\r\n  get(\"/tweets.json\") { request =>\r\n    render.json(tweets)\r\n  }\r\n\r\n  get(\"/status/:status\") { request =>\r\n    val statusCode = request.params(\"status\").toInt\r\n\r\n    render.nothing.status(statusCode)\r\n  }\r\n\r\n  get(\"/not_found\") { request =>\r\n    render.nothing.notFound\r\n  }\r\n\r\n  get(\"/headers\") { request =>\r\n    render.nothing.header(\"X-GitSHA\", \"1ecd6b1\")\r\n  }\r\n\r\n}\r\n```\r\n\r\n### Views\r\n\r\n```scala\r\n\r\nclass TimelineView(val tweets:List[Tweet]) extends View {\r\n  val template = \"timeline.mustache\"\r\n}\r\n\r\nclass HelloWorld extends Controller {\r\n\r\n  def tweets = List(new Tweet(\"hey!\"), new Tweet(\"lol\"))\r\n\r\n  get(\"/tweets\") { request =>\r\n    val tweetsView  = new TimelineView(tweets)\r\n\r\n    render.view(tweetsView)\r\n  }\r\n\r\n}\r\n```\r\n\r\n### File Uploads\r\n\r\n```scala\r\nimport com.twitter.finatra._\r\n\r\nobject UploadExample extends Controller {\r\n\r\n  //Example curl:\r\n  //curl -F myfile=@/home/capotej/images/bad-advice-cat.jpeg http://localhost:7070/upload\r\n\r\n  //the multiPart method returns MultiPartItem objects, which have some handy methods\r\n  post(\"/upload\") { request =>\r\n\r\n    request.multiParams.get(\"myfile\") match {\r\n      case Some(file) =>\r\n\r\n        //get the content type\r\n        file.contentType\r\n\r\n        //get the data\r\n        file.data\r\n\r\n        //get the uploaded filename\r\n        file.filename\r\n\r\n        //copy the file somewhere\r\n        file.writeToFile(\"/tmp/uploadedfile.jpg\")\r\n        render.ok\r\n      case None =>\r\n        render.notFound\r\n    }\r\n  }\r\n}\r\n\r\n\r\n  //Form Example\r\n  //curl -F foo=bar http://localhost:7070/formsubmit\r\n\r\n  post(\"/formsubmit\") { request =>\r\n    request.multiParams(\"foo\").getOrElse(null).data // \"bar\"\r\n  }\r\n\r\n\r\n```\r\n","tagline":"finagle + sinatra","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Finatra","google":""}